"""
title：字符串转数字
writer：山客
date：2021.8.27
key：正则表达式
example：
输入：s = "42"
输出：42
解释：加粗的字符串为已经读入的字符，插入符号是当前读取的字符。
第 1 步："42"（当前没有读入字符，因为没有前导空格）
         ^
第 2 步："42"（当前没有读入字符，因为这里不存在 '-' 或者 '+'）
         ^
第 3 步："42"（读入 "42"）
           ^
解析得到整数 42 。
由于 "42" 在范围 [-2^31, 2^31 - 1] 内，最终结果为 42 。
tips：
① 正则表达式最快
② 若不用辅助库，则需要先清掉无用空格，再判断是数字还是字母
"""

import re


class Solution:
    def myAtoi(self, s: str) -> int:
        num = 0  # 结果

        # 初始化
        s = s.lstrip()  # 清除左边无用空格
        # 创建正则规则
        # '^': 表示匹配字符串开头
        # [\+\-]?: 表示代表一个字符 + 或 -， ? 表示这个字符可有可无
        # \d: 一个数字
        # +: 前面字符的一个或多个  *: 前面字符的零个或多个
        reNum = re.compile('^[\+\-]?\d+')

        res = reNum.findall(s)  # 查找匹配字符串，返回的是一个列表
        if res:
            num = int(''.join(res))  # 必须解包该列表，才可以进行类型转换

        # 处理越界
        return max(-2**31, min(2**31 - 1, num))


if __name__ == '__main__':
    s = Solution()
    print(s.myAtoi("-987 and"))
